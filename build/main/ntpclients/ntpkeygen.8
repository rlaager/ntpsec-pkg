'\" t
.\"     Title: ntpkeygen
.\"    Author: [FIXME: author] [see http://docbook.sf.net/el/author]
.\" Generator: DocBook XSL Stylesheets v1.78.1 <http://docbook.sf.net/>
.\"      Date: 10/10/2017
.\"    Manual: \ \&
.\"    Source: \ \&
.\"  Language: English
.\"
.TH "NTPKEYGEN" "8" "10/10/2017" "\ \&" "\ \&"
.\" -----------------------------------------------------------------
.\" * Define some portability stuff
.\" -----------------------------------------------------------------
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.\" http://bugs.debian.org/507673
.\" http://lists.gnu.org/archive/html/groff/2009-02/msg00013.html
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\" -----------------------------------------------------------------
.\" * set default formatting
.\" -----------------------------------------------------------------
.\" disable hyphenation
.nh
.\" disable justification (adjust text to left margin only)
.ad l
.\" -----------------------------------------------------------------
.\" * MAIN CONTENT STARTS HERE *
.\" -----------------------------------------------------------------
.SH "NAME"
ntpkeygen \- create and manage NTP host keys
.SH "SYNOPSIS"
.sp
.nf
ntpkeygen [\-M]
.fi
.SH "DESCRIPTION"
.sp
This program generates the keys used in NTP\(cqs symmetric key cryptography\&.
.sp
The program produces a file containing ten pseudo\-random printable ASCII strings suitable for the MD5 message digest algorithm included in the distribution\&. It also produces an additional ten hex\-encoded random bit strings suitable for the SHA\-1 and other message digest algorithms\&. The message digest keys file must be distributed and stored using secure means beyond the scope of NTP itself\&. Besides the keys used for ordinary NTP associations, additional keys can be defined as passwords for the ntpq utility program\&.
.SH "COMMAND LINE OPTIONS"
.PP
\-M, \-\-md5key
.RS 4
Dummy option for backward compatibility in old scripts\&. This program always runs in \-M mode\&.
.RE
.SH "RUNNING THE PROGRAM"
.sp
The safest way to run the ntpkeygen program is logged in directly as root\&. The recommended procedure is change to the keys directory, usually /usr/local/etc, then run the program\&.
.sp
Installing the keys as root might not work in NFS\-mounted shared file systems, as NFS clients may not be able to write to the shared keys directory, even as root\&. In this case, NFS clients can specify the files in another directory such as /etc using the \fIkeys\fR command\&.
.if n \{\
.sp
.\}
.RS 4
.it 1 an-trap
.nr an-no-space-flag 1
.nr an-break-flag 1
.br
.ps +1
\fBWarning\fR
.ps -1
.br
.sp
ntpkeygen uses the system randomness source\&. On a POSIX system this is usually /dev/urandom\&. Immediately after a reboot, on any OS, there may not be sufficient entropy available for this program to perform well\&. Do not run this program from any startup scripts\&. Only run this program on an active host with a lot of available entropy\&.
.sp .5v
.RE
.SH "KEY FILE ACCESS AND LOCATION"
.sp
The ntpd(8) configuration command \fIcrypto\fR \fIpw\fR \fIpassword\fR specifies the read password for previously encrypted files\&. The daemon expires on the spot if the password is missing or incorrect\&. For convenience, if a file has been previously encrypted, the default read password is the name of the host running the program\&. If the previous write password is specified as the host name, these files can be read by that host with no explicit password\&.
.sp
File names begin with the prefix \fIntpkey\fR and end with the postfix \fIhostname\&.filestamp\fR, where \fIhostname\fR is the owner name, usually the string returned by the Unix gethostname() routine, and \fIfilestamp\fR is the NTP seconds when the file was generated, in decimal digits\&. This both guarantees uniqueness and simplifies maintenance procedures, since all files can be quickly removed by a \fIrm\fR \fIntpkey*\fR command or all files generated at a specific time can be removed by a \fIrm\fR \fI*filestamp\fR command\&.
.sp
All files are installed by default in the keys directory /usr/local/etc, which is normally in a shared filesystem in NFS\-mounted networks\&. The actual location of the keys directory and each file can be overridden by configuration commands, but this is not recommended\&. Normally, the files for each host are generated by that host and used only by that host, although exceptions exist as noted later on this page\&.
.SH "RANDOM SEED FILE"
.sp
All key generation schemes must have means to randomize the entropy seed used to initialize the internal pseudo\-random number generator used by the library routines\&.
.sp
It is important to understand that entropy must be evolved for each generation, for otherwise the random number sequence would be predictable\&. Various means dependent on external events, such as keystroke intervals, can be used to do this and some systems have built\-in entropy sources\&.
.sp
This implementation uses Python\(cqs random\&.SystemRandom class, which relies on os\&.urandom()\&. The security of os\&.urandom() is improved in Python 3\&.5+\&.
.SH "CRYPTOGRAPHIC DATA FILES"
.sp
The ntpkeygen program generates a file of symmetric keys \fIntpkey_MD5key_hostname\&.filestamp\fR\&. Since the file contains private shared keys, it should be visible only to root and distributed by secure means to other subnet hosts\&. The NTP daemon loads the file \fIntp\&.keys\fR, so ntpkeygen installs a soft link from this name to the generated file\&. Subsequently, similar soft links must be installed by manual or automated means on the other subnet hosts\&. This file is needed to authenticate some remote configuration commands used by the ntpq(1) utility\&.
.sp
Comments may appear in the file, and are preceded with the # character\&.
.sp
Following any headers the keys are entered one per line in the format:
.TS
allbox tab(:);
ltB ltB.
T{
Field
T}:T{
Meaning
T}
.T&
lt lt
lt lt
lt lt.
T{
.sp
keyno
T}:T{
.sp
Positive integer in the range 1\-65,535
T}
T{
.sp
type
T}:T{
.sp
MD5 or SHA\-1 , type of key
T}
T{
.sp
key
T}:T{
.sp
the actual key, printable ASCII
T}
.TE
.sp 1
.SH "EXIT STATUS"
.sp
One of the following exit values will be returned:
.PP
0 (EXIT_SUCCESS)
.RS 4
Successful program execution\&.
.RE
.PP
1 (EXIT_FAILURE)
.RS 4
The operation failed or the command syntax was not valid\&.
.RE
