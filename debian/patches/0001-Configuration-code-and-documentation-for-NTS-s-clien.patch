Description: Update authentication methods documentation
 This is part of an upstream commit, with the NTS code changes and one
 documentation link stripped.
Origin: https://gitlab.com/NTPsec/ntpsec/commit/e22f52ec588d6084ccb7d197c37e4c87005289a8
Last-Update: 2019-02-03

--- a/docs/authentic.adoc
+++ b/docs/authentic.adoc
@@ -18,12 +18,10 @@
 == Table of Contents ==
 
 * link:#auth[Introduction]
-* link:#symm[Symmetric Key Cryptography]
-* link:#operation[Operation]
-* link:#keys[Key Management]
-* link:#algorithms[Algorithms]
-* link:#formats[Data Formats]
-//* link:#windows[Microsoft Windows Authentication]
+* link:#mac[MAC authentication]
+* link:#nts[Network Time Security]
+* link:#windows[Microsoft Windows Authentication]
+* link:#autokey[Autokey]
 
 '''''
 
@@ -31,18 +29,37 @@
 
 Authentication support allows the NTP client to verify that the server
 is in fact known and trusted and not an intruder accidentally
-or intentionally masquerading as that server.  NTP performs
-authentication via message digests. It computes a one-way hash, which
-verifies that the server has the correct private key and key identifier.
+or intentionally masquerading as that server.
+
+There are three forms of authentication: MAC, NTS, and MS-SNTP.  This
+section describes all three. Each is configured separately for each
+association by options to the server command.
+
+Note: MAC authentication is going to be replaced by NTS.  MAC
+authentication may be removed in a future release of NTPsec.
+
+An "Autokey" mode using an early form of public-key cryptography
+formerly existed but has been removed.
 
 A detailed discussion of the NTP multi-layer security model and
 vulnerability analysis is in the white paper
 {millshome}security.html[NTP Security Analysis].
 
-Authentication is configured separately for each association using the +key+
-subcommand on the +server+ configuration commands. The authentication
-options described below specify the locations of the key files and
-which symmetric keys are trusted.
+[[mac]]
+=== MAC authentication  ===
+
+MAC authentication uses symmetric-key cryptography via message
+digests. It computes a one-way hash, which verifies that the server
+has the correct private key and key identifier.
+
+Beware: both commonly supported message digest formats, MD5 and SHA-1,
+have been either entirely or partly cracked and should not ne
+consideredc strong security.
+
+MAC authentication is is configured using the +key+ subcommand on the
++server+ configuration commands. The authentication options described
+below specify the locations of the key files and which symmetric keys
+are trusted.
 
 Authentication is always enabled, although ineffective if not configured
 as described below. If an NTP packet arrives including a message
@@ -52,9 +69,6 @@
 by an intruder, it will fail one or more of these checks and be
 discarded.  Authentication doesn't prevent replays.
 
-[[symm]]
-=== Symmetric-Key Cryptography ===
-
 NTP allows use of any one of possibly 65,535 keys, each distinguished by a
 32-bit key identifier, to authenticate an association. Both server and
 client must agree on the key and key identifier in order to
@@ -75,7 +89,7 @@
 selects the key used as the password for the {ntpqman} utility.
 
 [[operation]]
-== Operation ==
+=== MAC Operation ===
 
 A server receiving an unauthenticated packet will respond with an
 unauthenticated packet, while the same server receiving a packet of a
@@ -105,14 +119,14 @@
 different servers (or the same server, although that might not be useful).
 
 [[keys]]
-== Key Management ==
+=== MAC Key Management ===
 
 Shared keys used for authentication are incorporated
 into the keys files generated by the {ntpkeygenman} utility
 program.
 
 [[algorithms]]
-== Algorithms ==
+=== MAC Algorithms ===
 
 The NTP standards include symmetric (private-key) authentication using
 any message digest algorithm supported by the OpenSSL package.
@@ -135,7 +149,7 @@
 access to all but correctly authenticated clients.
 
 [[formats]]
-== Data Formats ==
+=== MAC Data Formats ===
 
 The NTPv4 specification (RFC 5905) allows any one of possibly 65,535
 message digest keys (excluding zero), each distinguished by a 32-bit key
@@ -193,6 +207,14 @@
 The +controlkey+ command selects the key ID used as the password
 for the +ntpq+ utility.
 
+[[nts]]
+== Network Time Security ==
+
+This section is a placeholder for complete documentation on NTS. The
+NTS implementation is work in progress conforming to a draft RFC not
+yet accepted. NTPsec's future direction is to fully support NTS
+and remove older, insecure authentication methods.
+
 [[windows]]
 == Microsoft Windows Authentication ==
 
@@ -207,11 +229,15 @@
 users. Therefore, this flag should be used only for a dedicated server
 with no clients other than MS-SNTP.*
 
+[[autokey]]
+==  Autokey ==
 
-== History ==
+Old versions of NTP supported Autokey, which used an early form of
+public-key cryptography for authentication. It was described in RFC 5906.
 
-Old versions of NTP supported Autokey. It is described in RFC 5906.
-It used key ids greater than 64K.
+Unfortunately, autokey was buggy and a source of vulnerabilities; it
+has been removed. NTS is intended to replace it. It is mentioned here
+only for historical completeness.
 
 
 '''''
--- a/docs/confopt.adoc
+++ b/docs/confopt.adoc
@@ -18,7 +18,7 @@
 
 * link:#address[Server and Peer Addresses]
 * link:#association[Association Commands]
-* link:#option[Server Command Options]
+* link:#options[Server Command Options]
 
 '''''
 
@@ -60,7 +60,7 @@
 
 include::includes/assoc-commands.adoc[]
 
-[[option]]
+[[options]]
 == Server Command Options ==
 
 include::includes/assoc-options.adoc[]
