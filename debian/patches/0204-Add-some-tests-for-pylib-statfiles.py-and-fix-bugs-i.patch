From 60f5dadf86f913648eb8c0162a8d9133c85ed1e9 Mon Sep 17 00:00:00 2001
From: Matt Selsky <matthew.selsky@twosigma.com>
Date: Wed, 7 Dec 2016 03:09:10 -0500
Subject: [PATCH 204/268] Add some tests for pylib/statfiles.py and fix bugs
 identified by the tests.

Including:
- missing import
- calling isdigit() on an int
- time.struct_time has no member m_isdst (and tm_isdst is read-only)
- posix_to_iso should return ISO 8601 in UTC
---
 pylib/statfiles.py            | 10 +++++-----
 tests/pylib/test_statfiles.py | 20 ++++++++++++++++++++
 2 files changed, 25 insertions(+), 5 deletions(-)
 create mode 100644 tests/pylib/test_statfiles.py

diff --git a/pylib/statfiles.py b/pylib/statfiles.py
index 941e71b..7791b85 100644
--- a/pylib/statfiles.py
+++ b/pylib/statfiles.py
@@ -7,6 +7,7 @@ Requires GNUPLOT and liberation fonts installed.
 #SPDX-License-Identifier: BSD-2-Clause
 from __future__ import print_function, division
 
+import calendar
 import glob, gzip, os, socket, sys, time
 
 class NTPStats:
@@ -203,16 +204,15 @@ class NTPStats:
 
 def iso_to_posix(s):
     "Accept timestamps in ISO 8661 format or numeric POSIX time. UTC only."
-    if s.isdigit():
+    if str(s).isdigit():
         return int(s)
     else:
         t = time.strptime(s, "%Y-%m-%dT%H:%M:%S")
-        t.m_isdst = 0
         # don't use time.mktime() as that is local tz
-        return  calendar.timegm(t)
+        return calendar.timegm(t)
 
 def posix_to_iso(t):
-    "ISO 8601 string from Unix time."
-    return time.strftime("%Y-%m-%dT%H:%M:%S", time.localtime(t))
+    "ISO 8601 string in UTC from Unix time."
+    return time.strftime("%Y-%m-%dT%H:%M:%S", time.gmtime(t))
 
 # end
diff --git a/tests/pylib/test_statfiles.py b/tests/pylib/test_statfiles.py
new file mode 100644
index 0000000..8563a54
--- /dev/null
+++ b/tests/pylib/test_statfiles.py
@@ -0,0 +1,20 @@
+import unittest
+import ntp.statfiles
+
+class TestPylibStatfilesMethods(unittest.TestCase):
+
+    def test_iso_to_posix(self):
+        self.assertEqual(ntp.statfiles.iso_to_posix(1480999786), 1480999786)
+        self.assertEqual(ntp.statfiles.iso_to_posix("2016-12-06T04:49:46"), 1480999786)
+
+    def test_posix_to_iso(self):
+        self.assertEqual(ntp.statfiles.posix_to_iso(1480999786), "2016-12-06T04:49:46")
+
+    def test_iso_to_posix_inverts_posix_to_iso(self):
+        self.assertEqual(ntp.statfiles.iso_to_posix(ntp.statfiles.posix_to_iso(1480999786)), 1480999786)
+
+    def test_posix_to_iso_inverts_iso_to_posix(self):
+        self.assertEqual(ntp.statfiles.posix_to_iso(ntp.statfiles.iso_to_posix("2016-12-06T04:49:46")), "2016-12-06T04:49:46")
+
+if __name__ == '__main__':
+    unittest.main()
-- 
2.7.4

