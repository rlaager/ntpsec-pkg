--- a/docs/includes/ntpwait-body.txt
+++ b/docs/includes/ntpwait-body.txt
@@ -23,6 +23,11 @@
 The maximum number of times we will check _ntpd_ to see if it has been
 able to synchronize and stabilize the system clock.
 
++-q+, +--quick+::
+  By default, +ntpwait+ waits for a full synchronization. With this
+  option, +ntpwait+ only waits for the initial clock step to occur
+  (or, without "ntp -g", for slewing to begin).
+
 +-s+ _secs-between-tries_, +--sleep+=_secs-between-tries_::
   How long to sleep between tries. This option takes an integer number
   as its argument. The default _secs-between-tries_ for this option
--- a/ntpclients/ntpwait
+++ b/ntpclients/ntpwait
@@ -44,19 +44,22 @@
 
 if __name__ == "__main__":
     try:
-        (options, arguments) = getopt.getopt(sys.argv[1:], "hn:s:v", [
-            "tries=", "sleep=", "verbose", "help"
+        (options, arguments) = getopt.getopt(sys.argv[1:], "hn:qs:v", [
+            "tries=", "quick", "sleep=", "verbose", "help"
         ])
     except getopt.GetoptError as err:
         sys.stderr.write(str(err) + "\n")
         raise SystemExit(2)
     tries = 100
+    quick = False
     sleep = 6
     verbose = 0
     for (switch, val) in options:
         if switch in ("-n", "--tries"):
             errmsg = "Error: -n parameter '%s' not a number\n"
             tries = ntp.util.safeargcast(val, int, errmsg, __doc__)
+        elif switch in ("-q", "--quick"):
+            quick = True
         elif switch in ("-s", "--sleep"):
             errmsg = "Error: -s parameter '%s' not a number\n"
             sleep = ntp.util.safeargcast(val, int, errmsg, __doc__)
@@ -109,8 +112,15 @@
             sys.stdout.write("\bLeap status not available\n")
             sys.exit(1)
 
+        m = re.search(r"refid=([^,]*),", response)
+        if m:
+            refid = m.group(1)
+        else:
+            refid = "INIT"
+
         if leap in (ntp.magic.LEAP_NOWARNING, ntp.magic.LEAP_ADDSECOND,
-                    ntp.magic.LEAP_DELSECOND):
+                    ntp.magic.LEAP_DELSECOND) or \
+           (quick and refid != "INIT"):
             # We could check "sync" here to make sure we like the source...
             if verbose:
                 sys.stdout.write("\bOK! (%.1f seconds)\n" %
