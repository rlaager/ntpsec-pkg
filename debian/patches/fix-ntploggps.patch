Description: Fix ntploggps
 I ported ntploggps to the new-style API and made it wait for a valid SKY
 message.  This fixes the delivery of TDOP (which was otherwise always zero for
 me) and the satellite count (which was often zero).  It also waits for a valid
 TPV message, ensuring it can report the device properly.
Forwarded: no
Origin: vendor
Author: Richard Laager <rlaager@wiktel.com>
Last-Update: 2017-11-10
--- a/ntpclients/ntploggps
+++ b/ntpclients/ntploggps
@@ -126,6 +126,9 @@
 
     def __init__(self):
         threading.Thread.__init__(self)
+        self.device = None
+        self.satellites_used = None
+        self.tdop = None
         # start the streaming of gps data
         try:
             self.gpsd = gps.gps(mode=gps.WATCH_ENABLE)
@@ -137,23 +140,30 @@
 
     def run(self):
         while gpsp.running:
-            try:
-                self.gpsd.next()     # loop and grab each set of gpsd info
-            except:
+            if self.gpsd.read() == -1:
                 self.running = False
                 break
+            if hasattr(self.gpsd, "data"):
+                if self.gpsd.data.get("class") == "SKY":
+                    self.satellites_used = 0
+                    self.tdop = self.gpsd.data.get("tdop", 0)
+                    for sat in self.gpsd.data.get("satellites", []):
+                        if sat["used"]:
+                            self.satellites_used += 1
+                elif self.gpsd.data.get("class") == "TPV":
+                    self.device = self.gpsd.data.get("device")
 
-    def get_time(self):
+    @property
+    def time(self):
         "Return the gpsd time fix"
-        return self.gpsd.fix.time
-
-    def log_line(self):
-        "Displays the time, device, TDOP, and nSat data collected"
-        s = '%s %s %f %d' % (gps.isotime(self.get_time()),
-                             self.gpsd.device,
-                             self.gpsd.tdop,
-                             self.gpsd.satellites_used)
-        return s
+        t = self.gpsd.fix.time
+        if isinstance(t, int):
+            return t
+        if isinstance(t, float):
+            if gps.isnan(t):
+                return None
+            return t
+        return gps.isotime(t)
 
 if __name__ == '__main__':
     # this is the main thread
@@ -174,10 +184,20 @@
             # It may take a second or two to get good data
 
             try:
-                if 'nan' != gpsp.get_time() and not gps.isnan(gpsp.get_time()):
-                    if last_time != gpsp.get_time():
-                        Logger.info(gpsp.log_line())
-                    last_time = gpsp.get_time()
+                current_time = gpsp.time
+                device = gpsp.device
+                tdop = gpsp.tdop
+                satellites_used = gpsp.satellites_used
+
+                if current_time is not None and \
+                   device is not None and \
+                   satellites_used is not None and \
+                   tdop is not None:
+                    if last_time != current_time:
+			s = '%i %s %f %d' % (current_time, device, tdop,
+					     satellites_used)
+                        Logger.info(s)
+                        last_time = current_time
                     if args.once:
                         # just once
                         break
