From a3a9bfd19d3f217439adbd8075f79bfb456b10a6 Mon Sep 17 00:00:00 2001
From: "Eric S. Raymond" <esr@thyrsus.com>
Date: Wed, 7 Dec 2016 17:53:16 -0500
Subject: [PATCH 210/268] In pyntpdig, fill in the xmt field as the C version
 does.

---
 ntpdig/pyntpdig | 12 ++++--------
 pylib/packet.py |  7 ++++---
 2 files changed, 8 insertions(+), 11 deletions(-)

diff --git a/ntpdig/pyntpdig b/ntpdig/pyntpdig
index 6e46d52..2458e21 100755
--- a/ntpdig/pyntpdig
+++ b/ntpdig/pyntpdig
@@ -58,11 +58,13 @@ def queryhost(server, concurrent, timeout=5, port=123):
         return []
     sockets = []
     packets = []
+    request = ntp.packet.SyncPacket()
+    request.transmit_timestamp = ntp.packet.SyncPacket.posix_to_ntp(time.time())
+    packet = request.flatten()
     for (family, socktype, proto, canonname, sockaddr) in iptuples:
         if debug:
             log("querying %s (%s)" % (sockaddr[0], server))
         s = socket.socket(family, socktype)
-        packet = b'\xe3' + b'\0' * 47
         if keyid and keytype and passwd:
             if debug:
                 log("authenticating with %s key %d" % (keytype, keyid))
@@ -153,17 +155,11 @@ def clock_select(packets):
         if response.leap() == "unsync":
             drop("leap not in sync")
             continue
-        if not response.origin_timestamp < response.reference_timestamp:
-            drop("server is very broken")
-            continue
-        if response.origin_timestamp-response.reference_timestamp >= NTP_MAXAGE:
-            drop("server has gone too long without sync")
-            continue
         if not response.trusted:
             drop("request was authenticated but server is untrusted")
             continue
         # Bypass this test if we ever support broadcast-client mode again 
-        if response.origin_timestamp != 0:
+        if response.origin_timestamp == 0:
             drop("unexpected response timestamp")
             continue
         filtered.append(response)
diff --git a/pylib/packet.py b/pylib/packet.py
index 6cf1145..ee2f9d2 100644
--- a/pylib/packet.py
+++ b/pylib/packet.py
@@ -329,7 +329,7 @@ class Packet:
         self.li_vn_mode = 0     # leap, version, mode (uint8_t)
         # Subclasses have variable fields here
         self.extension = b''     # extension data
-        self.li_vn_mode = Packet.PKT_LI_VN_MODE(0, version, mode)
+        self.li_vn_mode = Packet.PKT_LI_VN_MODE(3, version, mode)
 
     # These decorators will allow us to assign the extension Python 3 strings
     @property
@@ -382,7 +382,8 @@ class SyncPacket(Packet):
         self.received = SyncPacket.posix_to_ntp(time.time())
         self.trusted = True
         self.rescaled = False
-        self.analyze()
+        if self.data:
+            self.analyze()
 
     def analyze(self):
         if len(self.data) < SyncPacket.HEADER_LEN or (len(self.data) & 3) != 0:
@@ -472,7 +473,7 @@ class SyncPacket(Packet):
         return ("no-leap", "add-leap", "del-leap", "unsync")[((self.li_vn_mode) >> 6) & 0x3]
     def flatten(self):
         "Flatten the packet into an octet sequence."
-        body = struct.pack(ControlPacket.format,
+        body = struct.pack(SyncPacket.format,
                            self.li_vn_mode,
                            self.stratum,
                            self.poll,
-- 
2.7.4

