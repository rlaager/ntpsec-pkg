From e28d8a0766687019e0dc6685a1ad798795b76e49 Mon Sep 17 00:00:00 2001
From: "Eric S. Raymond" <esr@thyrsus.com>
Date: Tue, 29 Nov 2016 13:14:28 -0500
Subject: [PATCH 069/268] First cut at link-checking tool for the
 documentation.

---
 devel/linkcheck | 55 +++++++++++++++++++++++++++++++++++++++++++++++++++++++
 wscript         |  4 ++++
 2 files changed, 59 insertions(+)
 create mode 100755 devel/linkcheck

diff --git a/devel/linkcheck b/devel/linkcheck
new file mode 100755
index 0000000..0d078be
--- /dev/null
+++ b/devel/linkcheck
@@ -0,0 +1,55 @@
+#!/usr/bin/env python
+#
+# linkcheck - check link integrity in the document tree
+#
+# Run this script from docs/
+#
+# SPDX-License-Identifier: BSD-2-clause
+from __future__ import print_function, division
+
+import os, re
+
+boxanchor_re = re.compile(r"\[\[[a-z0-9_-]*\]\]")
+linkanchor_re = re.compile(r"anchor:([a-z0-9_-]*)\[\]")
+refanchor_re = re.compile(r"link:([^.]*).html#([a-z0-9_-]*)")
+
+prefix = "docs/"
+
+def tabulate(path):
+    with open(path) as rp:
+        for (i, line) in enumerate(rp):
+            #path = path[len(prefix):]
+            m = boxanchor_re.search(line)
+            html = path[2:].replace(".txt", ".html") 
+            if m:
+                anchors.add("link:" + html + "#" + m.group(0)[2:-2])
+            m = linkanchor_re.search(line)
+            if m:
+                anchors.add("link:" + html + "#" + m.group(1))
+            m = refanchor_re.search(line)
+            if m:
+                references[m.group(0)] = (path, i+1)
+        
+
+if __name__ == '__main__':
+    references = {}
+    anchors = set([])
+    for dirpath, dnames, fnames in os.walk(prefix):
+        for f in fnames:
+            if f.endswith(".txt"):
+                tabulate(os.path.join(dirpath, f))
+    #print("References: %s" % references)
+    #print("Anchors: %s" % anchors)
+    hanging = []
+    for ref in references:
+        if ref not in anchors:
+            hanging.append(ref)
+    print("%d anchors, %d references, %d references unsatisfied" % \
+          (len(anchors), len(references), len(hanging)))
+    unsatisfied = list(hanging)
+    unsatisfied.sort()
+    for item in unsatisfied:
+        print('"%s", line %d: %s' % \
+              (references[item][0], references[item][1], item))
+
+# end
diff --git a/wscript b/wscript
index 485f31f..5ee6e44 100644
--- a/wscript
+++ b/wscript
@@ -257,6 +257,10 @@ def cxfreeze(ctx):
     "Create standalone binaries from Python scripts."
     ctx.exec_command("for prog in " + " ".join(python_scripts) + "; do cxfreeze $prog; done")
 
+def linkcheck(ctx):
+    "Report references without anchors in the documentation."
+    ctx.exec_command("devel/linkcheck")
+
 # The following sets edit modes for GNU EMACS
 # Local Variables:
 # mode:python
-- 
2.7.4

