From 31f0296a0c0b1de4ac20c7fcf134f1ecd4ead0fe Mon Sep 17 00:00:00 2001
From: "Eric S. Raymond" <esr@thyrsus.com>
Date: Thu, 1 Dec 2016 20:29:57 -0500
Subject: [PATCH 095/268] Cope better with invalid addresses passed to ntpq.

---
 ntpq/ntpq       |  2 ++
 pylib/packet.py | 12 ++++++------
 2 files changed, 8 insertions(+), 6 deletions(-)

diff --git a/ntpq/ntpq b/ntpq/ntpq
index 2b82f2c..e5db875 100755
--- a/ntpq/ntpq
+++ b/ntpq/ntpq
@@ -1643,6 +1643,8 @@ if __name__ == '__main__':
         raise SystemExit(0)
     except KeyboardInterrupt:
         interpreter.say("\n")
+    except ntp.packet.ControlException as e:
+        interpreter.warn(e.message + "\n")
     except IOError:
         print("Bailing out...")
 # end
diff --git a/pylib/packet.py b/pylib/packet.py
index f9905fb..5b492fb 100644
--- a/pylib/packet.py
+++ b/pylib/packet.py
@@ -792,14 +792,14 @@ class ControlSession:
         self.port = sockaddr[1]
         try:
             self.sock = socket.socket(family, socktype, protocol)
-        except socket.error as msg:
-            sys.stderr.write(msg)
-            return False
+        except socket.error as (errno, msg):
+            raise ControlException("Error opening %s: %s [%d]" \
+                                   % (hname, msg, errno))
         try:
             self.sock.connect(sockaddr)
-        except socket.error as msg:
-            sys.stderr.write(msg)
-            return False
+        except socket.error as (errno, msg):            
+            raise ControlException("Error connecting to %s: %s [%d]" \
+                                   % (hname, msg, errno))
         return True
 
     def password(self):
-- 
2.7.4

