--- a/contrib/pi-temp-log
+++ b/contrib/pi-temp-log
@@ -1,33 +1,29 @@
 #!/usr/bin/env python
 # coding: utf-8
 """\
-Usage: pi-temper-log
+Usage: zone-temper-log
 
-Reads /sys/class/thermal/thermal_zone0/temp to find the CPU temperature
-on a Raspberry Pi.  Writes all temperatures found to stdout on one line,
-preceded by the unix UTC time in seconds.
+Reads /sys/class/thermal/thermal_zone*/temp to find the CPU temperature.
+Writes all temperatures found to stdout on one line, preceded by the
+unix UTC time in seconds.
 
 
 Sample log:
 
-1471582083 PI 56.92
-1471582084 PI 57.458
-1471582085 PI 56.92
-1471582086 PI 56.92
+1471582083 ZONE0 56.92
+1471582084 ZONE0 57.458
+1471582085 ZONE0 56.92
+1471582086 ZONE0 56.92
 
 
 Field 1: unix UTC time in seconds
-Field 2: Loug source (PI)
+Field 2: Log source (ZONE)
 Field 3: CPU Temperature
 
 Sample crontab usage:
 
 # take and log cpu temp every 5 mins
-*/5 * * * * /usr/local/sbin/pi-temp-log >> /var/log/ntpstats/temps
-
-This ONLY works on a Raspberry Pi.  Maybe not all of them.  The way
-to read your system temperatures will be hardware specific.
-
+*/5 * * * * /usr/local/sbin/zone-temp-log >> /var/log/ntpstats/temps
 """
 
 from __future__ import print_function
@@ -36,13 +32,14 @@
 
 now = int(time.time())
 
-f = open( '/sys/class/thermal/thermal_zone0/temp', 'r')
-for line in f:
-    # just one line
-    temp = float(line)
-
-f.close()
-
-temp /= 1000
-
-print( str(now) + ' PI ' + str(temp))
+zone = 0
+while True:
+    try:
+        f = open( '/sys/class/thermal/thermal_zone{0}/temp'.format(zone), 'r')
+    except:
+        break
+    for line in f:
+        temp = float(line) / 1000
+        print( '{0} ZONE{1} {2}'.format(now, zone, temp))
+    f.close()
+    zone = zone + 1
