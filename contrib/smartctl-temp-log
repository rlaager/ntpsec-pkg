#!/usr/bin/env python
# coding: utf-8
"""\
Usage: smartctl-temper-log [device]

Reads 'smartctl -a device' for temperature data.  If a device is not
sepecified on the commline line then /dev/sda is used.  Writes the
temperature found to stdout.  Each line contains the unix time in
seconds since the epoch, the identifier, and the temperature in Celcius.

Before you can use this utility smartctl must be installed and
configured.  See their documentation for that procedure.

Sample log from a typical hard disk.

1471573103 SMART 37.000

Field 1: unix time in seconds since the star of the epoch
Field 2: Log source (SMART)
Field 3: temperature in degrees C

Sample crontab usage:

# take and log disk temp every 5 mins
*/5 * * * * /usr/local/sbin/smart-temp-log >> /var/log/ntpstats/temps

Note, many distributions put smartctl in /usr/sbin, and do not
put /usr/sbin in the PATH of programs executed by crontab.

Not all hard drives support SMART.
Not all of SMART drives are supported by smartctl.
Not all smartctl compatible drives report temperature.
Not all reported temperatures are valid.

This file may only be useful as a template.  The way to read your disk
temperatures will be hardware specific.

"""


import re, subprocess, sys, time

# check for device on command line, otherwise use /dev/sda
device = '/dev/sda'
if 1 < len(sys.argv):
    # process device
    device = sys.argv[1]

try:
    output = subprocess.check_output(["smartctl", "-a", device], \
        stderr=subprocess.STDOUT, \
        universal_newlines=True)

except subprocess.CalledProcessError as e:
    sys.stderr.write( "ERROR: 'smartctl -a %s' failed\n" % device)
    sys.stderr.write( e.output )
    sys.stderr.write( "Return code: %s\n" % e.returncode )
    raise SystemExit(2)
except OSError as e:
    sys.stderr.write("ERROR: Could not start smartctl: %s\n" % e.strerror)
    raise SystemExit(2)


lines = output.split( '\n' )

# this regex matches temperature output lines from 'sensors -u'
pat = re.compile('194 Temperature_Celsius\s+\S+\s+(\d+)\s+')

now = int(time.time())

#lines = sys.stdin.readlines()
line = ''
for line in lines:
    match = pat.match( line )
    if match and match.group(1):
        temp = match.group(1)
        sys.stdout.write( '%d SMART %s\n' % (now, temp))
